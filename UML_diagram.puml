@startuml

package "blackjack"
{
    class Game
    {
        #mode:char
        #player:Player
        #dealer:Dealer
        #strat:String
        #min_bet:int
        #max_bet:int
        #playerBJcount:int
        #dealerBJcount:int
        #winCount:int
        #loseCount:int
        #pushCount:int
        #shoe:int
        #shuffle:int
        #shuffleNum:int
        #round:int
        #context:StateContext

        +Game(args:String[])
        +startGame()
        +changeState(newState:State)
        -initMode(args:String)
        -initBet(min:String, max:String)
        -initSim(args:String[])
        -errorChecking(args:String[])
        -initCounts(args:String[])
        -initNotDbug(args:String[])
        -initDbug(args:String[])
    }

    class Player
    {
        +game:Game
        +hands:LinkedList<Hand>
        +hilo_count:int
        +ace5_count:int

        #hilo:HiLo
        #basic:Basic
        #ace5:Ace5
        #stdbet:StdBet
        #strat:String

        +balance:float
        +action:String
        +cmdFile:File
        +insuranceBet:float
        +initBalance:float

        -s:Scanner
        -input:InputStream
        -delim:String
        +handNumber:int
        +splitted:boolean
        +handsLeft:int
        +nHands:int
        +allBlackjack:boolean
        +lastBet:int
        +roundOutcome:int

        +Player(game:Game, balance:int, string:String)
        +stats()
        +readPlay(state:int):String
        +simulation(strat:String, state:int):String
        +hit(print:boolean)
        +stand()
        +splitCheck():boolean
        +split()
        +insuranceCheck():boolean
        +insure()
        +insured():boolean
        +surrender()
        +doubleCheck():boolean
        +doubleDown()
        +showAllHands():String
        +placeBet(value:int):boolean
    }

    class Dealer
    {
        #game:Game
        +holeCard:Card
        #Shoe shoe
        #Hand hand
        +nHands:int

        +Dealer(game:Gamr)
        +Dealer(game:Game, shoe:String)
        +hit()
        +dealCards()
        +checkBJ():int
        +bustCheck(Hand handToCheck):int
        +playOtherHand()
        +newRound()
        +showHole()
        +bust()
        +stand(print:boolean)
        +insuranceCheck()
        -printEndScreen(dealerBust:boolean)
        +showHand():String
    }

    class HiLo
    {
        -count:int
	    -suggest:char
'
        +HiLo()
        +advice(Game game, boolean print)
        +Count(Card card)
        +getTrueCount(shoe:Shoe):float
        +bestAction(playerHand:Hand, dealerCard:Card, trueCount:float):char
        +resetCount()
        +getRunningCount():int
        +toString():String
        +simAction(player:Player, state:int):String
    }
    
    class Basic
    {
        -suggest:char
        -hard:char[][]
        -soft:char[][]
        -pair:char[][]

        +advice(game:Game, print:boolean)
        +simAction(player:Player, state:int):String
    }
    
    class Ace5
    {
        -count:int
        -minBet:int
        -maxBet:int
        -lastBet:int
        -suggest:int

        +Ace5(minBeT:int, maxBeT:int)
        +advice(game:Game, print:boolean)
        +ace5Count(card:Card)
        +resetCount()
        +String simAction()
    }
    
    class Std_bet
    {
        -int bet;
        +advice(Game game, boolean print)
        +increaseDecrease(roundOutcome:int, lastBet:int, minBet:int, maxBet:int):int
        +simAction():String
    }
    
    class Shoe
    {
        +cards:LinkedList<Card>;
        +totalCards:int;
        +Shoe(numDecks:int)
        +Shoe(fileName:String)
        +singleDeck():LinkedList<Card>
        +LinkedList<Card> Shuffle()
        +getCard():Card
        +getPlayedCards():int
        +getNumCards():int
    }
    
    class Card
    {
        +rank:int
        -suit:int
        
        +Card(rank:int, suit:int)
        +Card(cardCode:String)
        +getSuit():char
        +showRank():String
        +getValue():int
    }

    interface State
    {
        +play(context:StateContext):boolean
    }

    class GameStart implements State
    {
        +play(context:StateContext):boolean
    }

    class DealState implements State
    {
        -firstInput:boolean
        +play(context:StateContext):boolean
    }

    class EndGameState implements State
    {
        +play(context:StateContext):boolean
    }


    
    left to right direction
    
    Player x--->  "0..* cards" Card
    
    Dealer x---> "0..* cards" Card
    
    Game "1 player" --"1" Player
    
    Game "1" -- "1" Dealer
    
    Dealer x--> "1 shoe" Shoe
    
    Shoe x--> "0..*\n cards" Card
    
}
@enduml