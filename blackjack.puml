
@startuml

package "blackjack"
{
    left to right direction

    package strategies
    {
        +class HiLo
        {
            -count: int
	        -suggest: char

            +HiLo()
            +advice(game: Game, print: boolean, state: int)
            +Count(card: Card)
            +getTrueCount(shoe: Shoe): float
            +bestAction(playerHand: Hand, dealerCard: Card, trueCount: float): char
            +resetCount()
            +getRunningCount(): int
            +simAction(player: Player, state: int): String
        }

        +class Basic
        {
            -suggest: char
            -hard: char[][]
            -soft: char[][]
            -pair: char[][]

            +advice(game: Game, print: boolean)
            +simAction(player: Player, state: int): String
        }

        +class Ace5
        {
            -count: int
            -minBet: int
            -maxBet: int
            -lastBet: int
            -suggest: int

            +Ace5(minBeT: int, maxBeT: int)
            +advice(game: Game, print: boolean)
            +ace5Count(card: Card)
            +resetCount()
            +String simAction()
        }
    
        +class StdBet
        {
            -int bet;

            +advice(game: Game, print: boolean)
            +increaseDecrease(roundOutcome: int, lastBet: int, minBet: int, maxBet: int): int
            +simAction(): String
        }
    }

    package statePattern
    {
        +interface State
        {
            +play(context: StateContext): boolean
        }

        +class GameStart implements State
        {
        }

        +class DealState implements State
        {
            -firstInput: boolean
        }

        +class EndGameState implements State
        {
        }

        +class SideRulesState implements State
        {
        }    
    }

    package deck
    {
    	+class Shoe
        {
            +totalCards: int

            +Shoe(numDecks: int)
            +Shoe(fileName: String)
            +singleDeck(): LinkedList<Card>
            +Shuffle(): LinkedList<Card>
            +getCard(): Card
            +getPlayedCards(): int
            +getNumCards(): int
        }

        +class Card
        {
            +rank: int
            -suit: int

            +Card(rank: int, suit: int)
            +Card(cardCode: String)
            +getSuit(): char
            +showRank(): String
            +getValue(): int
        }

    	Shoe *---x "0..*" Card
    }

    +class Game
    {
        #strat: String
        #min_bet: int
        #max_bet: int
        #playerBJcount: int
        #dealerBJcount: int
        #winCount: int
        #loseCount: int
        #pushCount: int
        #shoe: int
        #shuffle: int
        #shuffleNum: int
        #round: int
        #mode: char

        +Game(args: String[])
        +startGame()
        +stats()
        +changeState(newState: State)
        -initMode(args: String)
        -initBet(min: String, max: String)
        -initSim(args: String[])
        -errorChecking(args: String[])
        -initCounts(args: String[])
        -initNotDbug(args: String[])
        -initDbug(args: String[])
    }

    Game "1" --- "1" Player
    Game "1" --- "1" Dealer
    Game "1" --- "1" StateContext

    +class Player
    {

        +cmdFile: File
        -s: Scanner
        -input: InputStream
        #strat: String
        +action: String
        -delim: String
        +balance: float
        +insuranceBet: float
        +initBalance: float
        +splitted: boolean
        +allBlackjack: boolean
        +handNumber: int
        +handsLeft: int
        +nHands: int
        +lastBet: int
        +roundOutcome: int

        +Player(game: Game, balance: int, string: String)
        +readPlay(state: int): String
        +simulation(strat: String, state: int): String
        +hit(print: boolean)
        +stand()
        +splitCheck(): boolean
        +split()
        +insuranceCheck(): boolean
        +insure()
        +insured(): boolean
        +surrender()
        +doubleCheck(): boolean
        +doubleDown()
        +showAllHands(): String
        +placeBet(value: int): boolean
    }

    Player o---x "1" Hand
    Player o---x "1" HiLo
    Player o---x "1" Ace5
    Player o---x "1" StdBet
    Player o---x "1" Basic

    +class Dealer
    {
        +nHands: int

        +Dealer(game: Game)
        +Dealer(game: Game, shoe: String)
        +hit()
        +dealCards()
        +bustCheck(Hand handToCheck): int
        +playOtherHand()
        +newRound()
        +showHole()
        +bust()
        +stand(print: boolean)
        +insuranceCheck()
        -printEndScreen(dealerBust: boolean)
        +showHand(): String
    }

    Dealer o---x "1" Hand
    Dealer o---x "1" Card
    Dealer o---x "1" Shoe

    +class Hand
    {
        +bet: int
        +aceOf_1: int
        +busted: boolean

        +Hand(minBet: int)
        +handSum(): int
        +addCard(to_add: Card)
        +removeCard(toRemove: Card)
        +hasAce(): int
        +get(index: int): int
        +getCard(index: int): Card
        +getNumCards(): int
        +hasBlackjack(): boolean
        +isSplittable(): boolean
        +getAceOf1(): int
    }

    Hand *---x "0..*" Card

    +class StateContext
    {
        +StateContext(game_: Game) 
        +setState(newState: State)
        +play(): boolean
    }

    StateContext o---x "1" State
}

@enduml